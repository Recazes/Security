HTTP Response Codes
  10X == Informational
  
  2XX == Success
  
  30X == Redirection
  
  4XX == Client Error
  
  5XX == Server Error
  

wget -r -l2 -P /tmp ftp://ftpserver/
wget --save-cookies cookies.txt --keep-session-cookies --post-data 'user=1&password=2' https://website
wget --load-cookies cookies.txt -p https://website/interesting/article.php
    can support ssl and tls

JavaScript (JS)
  Allows websites to interact with the client
  
  JavaScript runs on the client’s machine
  
  Coded as .JS files, or in-line of HTML

Enumeration
  ROBOTS.TXT
      designed to tell web crawlers what they can and cannot list
  Legitimate surfing
  
  Tools:
  
    NSE scripts
    
    Nikto
      not installed on systems/ alot like nmap with more fidelity
    Burp suite (outside class)

Cross-Site Scripting (XSS) Overview
  Insertion of arbitrary code into a webpage, that executes in the browser of visitors
  Unsanitized GET, POST, and PUT methods allow JS to be placed on websites
  Often found in forums that allow HTML

Reflected XSS
Most common form of XSS
Transient, occurs in error messages or search results
Delivered through intermediate media, such as a link in an email
Characters that are normally illegal in URLs can be Base64 encoded

Below is what you see, but the server will decode as name=abc12
  http://example.com/page.php?name=dXNlcjEyMw

Stored XSS
Resides on vulnerable site
Only requires user to visit page
<img src="http://invalid" onerror="window.open('http://10.50.XX.XX:8000/ram.png','xss','height=1,width=1');">



Useful JavaScript Components
Proof of concept (simple alert):

<script>alert('XSS');</script>

Capturing Cookies
document.cookie

Capturing Keystrokes

bind KEYDOWN and KEYUP

Capturing Sensitive Data
document.body.innerHTML


Server-Side injection
Directory Traversal/Path Traversal

  Ability to read/execute outside web server’s directory
  
  Uses ../../ (relative paths) in manipulating a server-side file path

    view_image.php?file=../../etc/passwd

Malicious File Upload
Site allows unsanitized file uploads
  Server doesn’t validate extension or size
  Allows for code execution (shell)
  Once uploaded
      Find your file
      Call your file


Command Injection
Application on the server is vulnerable,
allowing execution of arbitrary commands

  User input not validated

    Common example is a SOHO router, with a web page to allow ping

    Might contain the following in it’s code:

      system("ping -c 1 ".$_GET["ip"]);

    Run the following to chain/stack our arbitrary command

      ; cat /etc/passwd


SQL
relational data
basically linked excell sheets


  Example - Injecting Your Statement
  User enters tom' OR 1='1 in the name and pass fields.
  
  Truth Statement: tom ' OR 1='1
  
  Server-Side query executed would appear like this:
  
  SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’

  Using # or -- tells the Database to ignore everything after

  prices.php?item=4 UNION SELECT 1,2,@@version --> shows SQL database version 



Standard SQL commands
 all commads end with a semicolon; 
  SELECT
  Extracts data from a database
  
  UNION
  Used to combine the result-set of two or more SELECT statements
  
  USE
  Selects the DB to use
  
  UPDATE
  Updates data in a database
  
  DELETE
  Deletes data from a database
  
  INSERT INTO
  Inserts new data into a database
  
  CREATE DATABASE
  Creates a new database
  
  ALTER DATABASE
  Modifies a database
  
  CREATE TABLE
  Creates a new table
  
  ALTER TABLE
  Modifies a table
  
  DROP TABLE
  Deletes a table
  
  CREATE INDEX
  Creates an index (search key)
  
  DROP INDEX
  Deletes an index


Golden Statement
  select table_schema,table_name,column_name from information_schema.columns ; 










































